// krealloc():

//	Attempts to resize the allocated space at "virtual_address" to "new_size" bytes,
//	possibly moving it in the heap.
//	If successful, returns the new virtual_address, in which case the old virtual_address must no longer be accessed.
//	On failure, returns a null pointer, and the old virtual_address remains valid.

//	A call with virtual_address = null is equivalent to kmalloc().
//	A call with new_size = zero is equivalent to kfree().

void *krealloc(void *virtual_address, uint32 new_size)
{
	//TODO: [PROJECT'23.MS2 - BONUS#1] [1] KERNEL HEAP - krealloc()
	// Write your code here, remove the panic and write your code
	 if (virtual_address == NULL)
	 {
	    return kmalloc(new_size);
	 }
	 if (new_size == 0)
	 {
	    kfree(virtual_address);
	    return NULL;
	 }
	// void* sys_sbrk(int increment);
	 //void* sbrk(int increment);
	 void* new_virtual_address = (void*)sbrk(new_size);
	     if (new_virtual_address != (void*)-1) {
	         memcpy(new_virtual_address, virtual_address, new_size);
	         kfree(virtual_address);

	         return new_virtual_address;
	     } else {
	         return NULL;
	     }
	return NULL;
	//panic("krealloc() is not implemented yet...!!");
}