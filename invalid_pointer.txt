if (userTrap)
		{
			/============================================================================================/
			//TODO: [PROJECT'23.MS2 - #13] [3] PAGE FAULT HANDLER - Check for invalid pointers
			//(e.g. pointing to unmarked user heap page, kernel or wrong access rights),
			//your code is here
			uint32* ptr_page_table;

			if (fault_va >= USER_HEAP_START && fault_va <= USER_HEAP_MAX) {
			        //check if the page is marked in the page working set
			        if (get_page_table(faulted_env->env_page_directory, fault_va, &ptr_page_table)== TABLE_NOT_EXIST) {
			            // Invalid page, kill the process
			        	sched_kill_env(faulted_env->env_id);
			        	faulted_env->env_status=ENV_FREE;
			            return;
			        }
			    }
			    // Check if it's pointing to kernel
			    if (CHECK_IF_KERNEL_ADDRESS(fault_va)) {
			        // Invalid page, kill the process
			    	sched_kill_env(faulted_env->env_id);
			    	faulted_env->env_status=ENV_FREE;
			        return;
			    }

			    // Check if it exists but with read-only permissions
			    uint32 permissions = pt_get_page_permissions(faulted_env->env_page_directory, fault_va);
			    if (permissions & PERM_WRITEABLE == 0) {
			        // Invalid page, kill the process
			    	sched_kill_env(faulted_env->env_id);
			    	faulted_env->env_status=ENV_FREE;
			        return;
			    }
			/============================================================================================/
		}
